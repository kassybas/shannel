var gcpProject: "kassybas"
var clusterFilter: ""

type ClusterConfig:
  name: ~
  location: ~
  configPath: ~

channel ClusterConfig cluster: ~
channel string fetchedCluster: ~
channel string clusterToCheck: ~


target fetchClusters:
  writes: fetchedClusters
  sh: gcloud container clusters list --project="${gcpProject}" | grep "${clusterFilter}" | snl push -d "\n" fetchedCluster

target parseCluster:
  sh: | 
    name="$(cut -d' ' -f1 <<< ${fetchedCluster})"
    path="config-sync/cluster-sync-configs/${name}"
    location="$(cut -d' ' -f2 <<< ${fetchedCluster})"
    if [[ ! -f ${path} ]]; then
      echo "SKIP: no config found for cluster ${name}"
      exit 0
    fi
    snl push clusters .name=${name} .path=${path} .configPath=${path}

target serial deployCluster cluster:
  from: cluster
  sh: |
    gcloud container clusters get-credentials "${cluster_name}" \
    --region "${cluster_location}" \
    --project=${gcpProject} 

    snl push --status clusterToCheck "${cluster_name}"
    snl push --status ensureNamespace 
    snl push --status ensureGitCreds

    gcloud beta container hub config-management apply \
    --project=${gcpProject}  \
    --membership="${cluster_name}" \
    --config="${config}"

    snl push clusterStatus
  

target clusterStatus:
  sh: |
    echo "Container hub config-management spec applied âœ…"
    echo "  Console: https://console.cloud.google.com/kubernetes/config_management?project=${gcpProject}"
    echo "  Status: " 
    echo $msg
    gcloud beta container hub config-management status

channel string clusterToCheck: ~
target silent checkContext:
  from: clusterToCheck
  sh: kubectl config current-context | grep "${clusterToCheck}"

target silent checkClusterMembership:
  from: clusterToCheck
  local:
    errorMsg: |
      Cluster not registered in Container Hub
      please register it via Config Connnect (./project/containerhub-membership)
      see: https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster#config-connector
  sh: gcloud container hub memberships list --project=${gcpProject} | grep "${clusterToCheck}" || snl push --status fatalLog "${errorMsg}"

target silent ensureNamespace:
  fresh: kubectl get namespace config-management-system
  sh: kubectl create namespace config-management-system
  
target ensureGitCreds:
  fresh: kubectl get secret git-creds -n config-management-system 
  sh: |
    if [[ $GHE_PRIVATE_KEY_FILE == "" ]]; then
        echo "ERROR: GHE private key not found: please set GHE_PRIVATE_KEY_FILE variable"
        exit 1
    fi
    kubectl create secret generic git-creds \
    --namespace=config-management-system \
    --from-file="ssh=${GHE_PRIVATE_KEY_FILE}"
  
target fatalLog:
  sh: echo "ERROR $(date) ${fataLog}"
